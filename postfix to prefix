#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#define MAX_SIZE 100
typedef struct Stack {
    char data[MAX_SIZE];
    int top;
} Stack;

void initialize(Stack *s) {
    s->top = -1;
}

int isEmpty(Stack *s) {
    return s->top == -1;
}

int isFull(Stack *s) {
    return s->top == MAX_SIZE - 1;
}

void push(Stack *s, char item) {
    if (isFull(s)) {
        printf("Stack overflow\n");
        exit(EXIT_FAILURE);
    }
    s->data[++s->top] = item;
}

char pop(Stack *s) {
    if (isEmpty(s)) {
        printf("Stack underflow\n");
        exit(EXIT_FAILURE);
    }
    return s->data[s->top--];
}

int isOperand(char c) {
    return isalnum(c);
}

int precedence(char c) {
    switch(c) {
        case '+':
        case '-':
            return 1;
        case '*':
        case '/':
            return 2;
        case '^':
            return 3;
        default:
            return -1;
    }
}

void  postfixToPrefix(char postfix[], char prefix[]) {
    Stack *s = malloc (sizeof(Stack s));
    initialize(s);
    int i, j = 0;
    for (i = 0; postfix[i] != '\0'; i++) {
        if (isOperand(postfix[i])) {
            prefix[j++] = postfix[i];
        } else if (postfix[i] == '(') {
            push(s, postfix[i]);
        } else if (postfix[i] == ')') {
            while (!isEmpty(s) && s->data[s->top] != '(') {
                prefix[j++] = pop(s);
            }
            if (!isEmpty(s) && s->data[s->top] != '(')
                return; // Invalid expression
            else
                pop(s);
        } else {
            while (!isEmpty(s) && precedence(postfix[i]) <= precedence(s->data[s->top])) {
                prefix[j++] = pop(s);
            }
            push(s, postfix[i]);
        }
    }
    while (!isEmpty(s)) {
        prefix[j++] = pop(s);
    }
    prefix[j] = '\0';
    
}
int main() {
    char postfix[MAX_SIZE], prefix[MAX_SIZE];
    printf("Enter the postfix expression: ");
    fgets(postfix, MAX_SIZE, stdin);
    postfixToPrefix(postfix, prefix);
    printf("The equivalent prefix expression is: %s\n", prefix);
    return 0;
}
